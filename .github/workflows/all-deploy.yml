
# Autogenerated by @runeya/common-workflows package
# If you must edit this file, edit files in .github/workflow-*.yml
# Then launch "yarn ci:generate"

name: Release

on:
  push:
    branches: 
      - master
      - develop
      - staging

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}

    outputs:
      changed: ${{ steps.changes.outputs.changed }}
      versionType: ${{ steps.version.outputs.type }}
      lerna: ${{ steps.lerna.outputs.lernaJson }}
    steps:
    - name: "Checkout ${{ github.ref_name }}"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'yarn'

    - run: npm set "//registry.npmjs.org/:_authToken" ${{ secrets.NPM_TOKEN }}

    - name: Ensure access
      run: npm whoami
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ vars.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Config git user
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Install dependencies
      run: yarn install --immutable

    - name: Lint
      run: yarn run lint

    - name: Tests
      run: yarn run test

    - name: Build
      run: yarn run build

    - id: changes
      name: "Export list of package has changed"
      run: |
        if [ ${GITHUB_REF##*/} = develop ]; then
          echo -n changed=$(yarn turbo test --filter="...[v.dev]" --dry-run=json | jq -c '.packages') >> $GITHUB_OUTPUT
        elif [ ${GITHUB_REF##*/} = staging ]; then
          echo -n changed=$(yarn turbo test --filter="...[v.staging]" --dry-run=json | jq -c '.packages') >> $GITHUB_OUTPUT
        else
          echo -n changed=$(yarn turbo test --filter="...[v.latest]" --dry-run=json | jq -c '.packages') >> $GITHUB_OUTPUT
        fi

    - name: "Print changes"
      run: echo "${{steps.changes.outputs.changed}}"

    - name: "Version and publish ${{github.ref_name}}"
      id: version
      env:
        GH_TOKEN: ${{ secrets.NPM_TOKEN }}
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor}}@users.noreply.github.com"

        if [ ${GITHUB_REF##*/} = develop ]; then
          git tag -fa v.dev -m "fix: set v.dev tag"
          git push origin v.dev -f
          echo "type=dev" >> $GITHUB_OUTPUT
        elif [ ${GITHUB_REF##*/} = staging ]; then
          git tag -fa v.staging -m "fix: set v.staging tag"
          git push origin v.staging -f
          echo "type=staging" >> $GITHUB_OUTPUT
        else
          npx lerna version --conventional-commits --conventional-graduate --yes
          npx lerna publish from-git --yes --registry https://registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }} --force-publish
          git tag -fa v.latest -m "fix: set v.latest tag"
          git push origin v.latest -f
          echo "type=latest" >> $GITHUB_OUTPUT
        fi

    - name: "Build and publish core package to npm"
      if: steps.version.outputs.type == 'latest' && contains(steps.changes.outputs.changed, 'servers-server')
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        echo "Attempting to build and publish server package..."
        cd servers/server
        npm run build
        cd dist
        npm publish --access public

    - id: lerna
      name: Export lerna config
      run: |
        echo lernaJson=$(cat lerna.json) >> $GITHUB_OUTPUT

  fronts-docs-docker:
    needs: [publish]
    runs-on: ubuntu-latest
    if: contains(needs.publish.outputs.changed, 'fronts-docs')
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ vars.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - id: package-json
        name: Read package.json
        run: |
          echo packageJSON=$(cat fronts/docs/package.json) >> $GITHUB_OUTPUT

      - name: Publish ${{needs.publish.outputs.versionType}} - ${{ github.ref_name }} 
        if: contains(github.ref_name, 'develop') || contains(github.ref_name, 'staging')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: fronts/docs/Dockerfile
          tags: | 
            ghcr.io/runeya/docker/fronts-docs:${{ github.ref_name }} 
          push: true
          build-args: |
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Publish Latest ${{needs.publish.outputs.versionType}} - ${{ github.ref_name }} 
        if: contains(github.ref_name, 'master')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: fronts/docs/Dockerfile
          tags: | 
            ghcr.io/runeya/docker/fronts-docs:latest
            ghcr.io/runeya/docker/fronts-docs:${{fromJson(steps.package-json.outputs.packageJson).version}}
          push: true
          build-args: |
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
 

  fronts-landing-docker:
    needs: [publish]
    runs-on: ubuntu-latest
    if: contains(needs.publish.outputs.changed, 'fronts-landing')
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ vars.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - id: package-json
        name: Read package.json
        run: |
          echo packageJSON=$(cat fronts/landing/package.json) >> $GITHUB_OUTPUT

      - name: Publish ${{needs.publish.outputs.versionType}} - ${{ github.ref_name }} 
        if: contains(github.ref_name, 'develop') || contains(github.ref_name, 'staging')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: fronts/landing/Dockerfile
          tags: | 
            ghcr.io/runeya/docker/fronts-landing:${{ github.ref_name }} 
          push: true
          build-args: |
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Publish Latest ${{needs.publish.outputs.versionType}} - ${{ github.ref_name }} 
        if: contains(github.ref_name, 'master')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: fronts/landing/Dockerfile
          tags: | 
            ghcr.io/runeya/docker/fronts-landing:latest
            ghcr.io/runeya/docker/fronts-landing:${{fromJson(steps.package-json.outputs.packageJson).version}}
          push: true
          build-args: |
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
 

  servers-plugins-docker:
    needs: [publish]
    runs-on: ubuntu-latest
    if: contains(needs.publish.outputs.changed, 'servers-plugins')
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ vars.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - id: package-json
        name: Read package.json
        run: |
          echo packageJSON=$(cat servers/plugins/package.json) >> $GITHUB_OUTPUT

      - name: Publish ${{needs.publish.outputs.versionType}} - ${{ github.ref_name }} 
        if: contains(github.ref_name, 'develop') || contains(github.ref_name, 'staging')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: servers/plugins/Dockerfile
          tags: | 
            ghcr.io/runeya/docker/servers-plugins:${{ github.ref_name }} 
          push: true
          build-args: |
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Publish Latest ${{needs.publish.outputs.versionType}} - ${{ github.ref_name }} 
        if: contains(github.ref_name, 'master')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: servers/plugins/Dockerfile
          tags: | 
            ghcr.io/runeya/docker/servers-plugins:latest
            ghcr.io/runeya/docker/servers-plugins:${{fromJson(steps.package-json.outputs.packageJson).version}}
          push: true
          build-args: |
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
 

  webhook:
    needs: [fronts-docs-docker,fronts-landing-docker,servers-plugins-docker]
    runs-on: ubuntu-latest
    if: always() && !failure() && !cancelled()
    steps:
      - name: Webhook master
        if: contains(github.ref_name, 'master')
        run: curl ${{ secrets.WEBHOOK_MASTER }}

      - name: Webhook develop
        if: contains(github.ref_name, 'develop')
        run: curl ${{ secrets.WEBHOOK_DEVELOP }}

      - name: Webhook staging
        if: contains(github.ref_name, 'staging')
        run: curl ${{ secrets.WEBHOOK_STAGING }}


  publish-plugins:
    needs: webhook
    runs-on: ubuntu-latest
    if: always() && !failure() && !cancelled()
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: "Checkout ${{ github.ref_name }}"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'

      - name: "Build and publish plugins packages to runeya"
        if: contains(github.ref_name, 'master')
        env:
          PLUGINS_API_URL: ${{ secrets.PLUGINS_API_URL }}
          PLUGINS_API_KEY: ${{ secrets.PLUGINS_API_KEY }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Attempting to build and publish plugins package to runeya..."
          yarn plugin:publish
      
