#!/usr/bin/env node

const { sockets } = require('@runeya/common-socket-server');
const pathfs = require('path');
const { mkdir, rm, cp } = require('fs/promises');
const { existsSync } = require('fs');

process.title = 'runeya';
const args = require('../helpers/args');


require('dotenv').config();
(async () => {

  const localLegacyPath = pathfs.resolve(args.runeyaConfigPath, '../.stackmonitor')
  const localNewPath = args.runeyaConfigPath
  if(existsSync(localLegacyPath) && !existsSync(localNewPath)) {
    console.log('Legacy path found, copy to new path')
    await cp(localLegacyPath, localNewPath, { recursive: true, force: true })
  }

  const globalLegacyPath = pathfs.resolve(args.runeyaGlobalConfigPath, '../.stackmonitor')
  const globalNewPath = args.runeyaGlobalConfigPath
  if(existsSync(globalLegacyPath) && !existsSync(globalNewPath)) {
    console.log('Legacy path found, copy to new path')
    await cp(globalLegacyPath, globalNewPath, { recursive: true, force: true })
  }

  if(existsSync(localLegacyPath) && !existsSync(pathfs.resolve(args.runeyaConfigPath, 'dbs/overrides'))) {
    console.log('Legacy path found, copy to new path')
    await cp(pathfs.resolve(localLegacyPath, 'dbs/overrides'), pathfs.resolve(args.runeyaConfigPath, 'dbs/overrides'), { recursive: true, force: true })
  }

  if(existsSync(localLegacyPath) && !existsSync(pathfs.resolve(args.runeyaConfigPath, 'dbs/encryption-key.json'))) {
    console.log('Legacy path found, copy to new path')
    await cp(pathfs.resolve(localLegacyPath, 'dbs/encryption-key.json'), pathfs.resolve(args.runeyaConfigPath, 'dbs/encryption-key.json'), { recursive: true, force: true })
  }
  if(args['pull-env']) {
    await require('../models/stack').selectConf();
    const service = require('../models/stack').findService(args.s)
    if(!service) {
      console.error('Service', args.s, 'not found')
      process.exit(1)
    }
    const envs = await service.buildEnvs(args['e'])
    console.log(Object.keys(envs).reduce((agg, key) => (agg+=`\n${key}=${envs[key]}`), '').trim())
    process.exit(0)
  } else {
    console.log('Root path:', args.rootPath)
    require('./server')
      .launch()
        .catch((err) => {
          console.error(err)
          return err
        })
  }
})()

process.on('uncaughtException', (err) => {
  console.error('Uncaught exception:', err);
  sockets.emit('critical:error', err);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled rejection:', reason);
  sockets.emit('critical:error', reason);
});
